/**
 * thindom - Inspired by jQuery, this simple library lets you create DOM elements really fast, with significantly more expressiveness than native DOM methods.
 * @version v1.0.10
 * @link https://github.com/somecallmechief/ThinDOM
 * @license Puclic Domain, CC0 (http://creativecommons.org/about/pdm)
 */
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/ThinDOM.coffee":[function(require,module,exports){
(function (global){
var ThinDOM, append, attr, camelCase, css, data, getPropName, html, jQuery, prepend, prop, remove, removeMethod, text, thisGlobal, _, _append, _prepend;

_ = (typeof window !== "undefined" ? window._ : typeof global !== "undefined" ? global._ : null);

jQuery = (typeof window !== "undefined" ? window.$ : typeof global !== "undefined" ? global.$ : null);


/*
Capture the global object in order of: global, window, this
 */

thisGlobal = (typeof global !== 'undefined' && global ? global : (typeof window !== 'undefined' ? window : this));


/*
Convert a hyphened-property to camelCaseProperty
 */

camelCase = (function() {
  var defaultRegex, ret, toUpper;
  toUpper = function(match, group1) {
    if (group1) {
      return group1.toUpperCase();
    } else {
      return '';
    }
  };
  defaultRegex = /[-_]+(.)?/g;
  ret = function(str, delimiters) {
    var regex;
    if (delemiters) {
      regex = new RegExp('[' + delimiters + ']+(.)?', 'g');
    } else {
      regex = defaultRegex;
    }
    return str.replace(regex, toUpper);
  };
  return ret;
})();


/*
Convenience method for adding props to objects
 */

prop = function(obj, name, value) {
  obj[name] = value;
  return obj;
};


/*
Capture the correct remove method for use when dropping nodes
 */

removeMethod = (function() {
  var el;
  if (typeof document !== 'undefined') {
    el = document.body;
    if (el.remove) {
      return 'remove';
    } else if (el.removeNode) {
      return 'removeNode';
    } else {
      return 'valueOf';
    }
  }
})();

_append = function(el, other) {
  return el.appendChild(other);
};


/*
Append one node to another
 */

append = function(self, other) {
  if (other.THINDOM) {
    _append(self.el, other.get());
  } else if (_.isElement(other)) {
    _append(self.el, other);
  } else if (other instanceof jQuery) {
    if (other.length > 1) {
      _.forEach(other, function(i, otherEl) {
        _append(self.el, otherEl);
      });
    } else {
      _append(self.el, other[0]);
    }
  }
  return self;
};

_prepend = function(el, other) {
  el.insertBefore(other, el.firstChild);
  return el;
};


/*
Prepend one node to the first child node position of another
 */

prepend = function(self, other) {
  if (other.THINDOM) {
    _prepend(self.el, other.get());
  } else if (_.isElement(other)) {
    _prepend(self.el, other);
  } else if (other instanceof jQuery) {
    if (other.length > 1) {
      _.forEach(other, function(i, otherEl) {
        _prepend(self.el, otherEl);
      });
    } else {
      _prepend(self.el, other[0]);
    }
  }
  return self;
};


/*
Drop a node
 */

remove = function(self) {
  self.el[removeMethod]();
};

getPropName = function(key) {
  var ret;
  ret = key;
  if (_.contains(key, '-')) {
    ret = camelCase(key);
  }
  return ret;
};


/*
Add styles
 */

css = function(self, properties, value) {
  if (_.isString(properties)) {
    return self.el.style[properties] = value;
  } else if (_.isPlainObject(properties)) {
    return _.forOwn(properties, function(val, key) {
      if (val !== '') {
        self.el.style[key] = val;
      }
    });
  }
};


/*
Add data props
per: http://jsperf.com/data-dataset/9
setAttribute is fastest
 */

data = function(self, properties, value) {
  if (_.isString(properties)) {
    if (false === (properties.indexOf('data-') === 0)) {
      properties = 'data-' + properties;
    }
    return attr(self, properties, value);
  } else if (_.isPlainObject(properties)) {
    return _.forOwn(properties, function(val, key) {
      if (false === (key.indexOf('data-') === 0)) {
        key = 'data-' + key;
      }
      attr(self, key, value);
    });
  }
};


/*
Set the inner HTML (slow)
 */

html = function(self, html) {
  var val;
  val = void 0;
  if (html == null) {
    val = self.el.innerHTML;
  } else {
    self.el.innerHTML = html;
    val = self;
  }
  return val;
};


/*
Add text node (fast)
 */

text = function(self, str) {
  var t, val;
  val = void 0;
  if (!str) {
    val = self.el.innerHTML;
  } else {
    t = document.createTextNode(str);
    self.el.appendChild(t);
    val = self;
  }
  return val;
};


/*
Set props on the node
 */

attr = function(self, properties, value) {
  if (_.isString(properties)) {
    self.el.setAttribute(properties, value);
  } else if (_.isObject(properties)) {
    _.forOwn(properties, function(val, key) {
      if (val !== '') {
        self.el.setAttribute(key, val);
      }
    });
  }
  return self;
};


/*
A little thin DOM wrapper with chaining
 */

ThinDOM = function(tag, attributes, el) {
  var ret;
  if (el == null) {
    el = null;
  }
  ret = {};
  ret.THINDOM = 'THINDOM';
  ret.el = el || document.createElement(tag);
  ret.add = function(name, val) {
    return prop(ret, name, val);
  };

  /*
  Append one element to another
   */
  ret.append = function(other) {
    return append(ret, other);
  };

  /*
  Prepend one element to another
   */
  ret.prepend = function(other) {
    return prepend(ret, other);
  };

  /*
  Remove the element
   */
  ret.remove = function() {
    return remove(ret);
  };

  /*
  Set the element's style attributes
   */
  ret.css = function(properties, value) {
    return css(ret, properties, value);
  };

  /*
  Set the inner HTML of the element.
   */
  ret.html = function(html_content) {
    return html(ret, html_content);
  };

  /*
  Set the inner text of the element as a Text Node
   */
  ret.text = function(str) {
    return text(ret, str);
  };

  /*
  Set attributes on the element
   */
  ret.attr = function(properties, value) {
    return attr(ret, properties, value);
  };

  /*
  Get the HTML Element
   */
  ret.get = function() {
    return ret.el;
  };
  if (attributes) {
    ret.attr(attributes);
  }
  return ret;
};

thisGlobal.ThinDOM = ThinDOM;

module.exports = ThinDOM;



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},["./src/ThinDOM.coffee"])
//# sourceMappingURL=data:application/json;base64,
